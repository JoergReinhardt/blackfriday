package agiledoc

import (
	//"fmt"
	con "github.com/emirpasic/gods/containers"
	al "github.com/emirpasic/gods/lists/arraylist"
	hm "github.com/emirpasic/gods/maps/hashbidimap"
	ts "github.com/emirpasic/gods/sets/treeset"
	as "github.com/emirpasic/gods/stacks/arraystack"
	"math/big"
)

//////////////////////// FUNCTIONAL TYPES TO REPRESENT VALUES /////////////////////
type (
	BitFlag func() *big.Int
	Stack   func() *as.Stack
	List    func() *al.List
	Set     func() *ts.Set
	Map     func() *hm.Map

	Table  List
	Matrix List

	Iterator   func() Iterable
	Enumerator func() Enumerable
)

// lists and sublists of exactly two values length, are assumed to be either
// key/value, or index/value pairs of Pair Type, by the modules Eval function
// on first pass.
//
// All longer slices are flattened by evalCollection and refed into eval
// recursively. .  All conversions to Collected,  get instanciated as list
// type,to profit from the enumerable interface at flattening and conversion.
// COLLECTED IMPLEMENTING METHODS
type Col func() con.Container

func (c Col) Type() ValueType           { return COLLECTED }
func (c Col) Empty() bool               { return c().Empty() }
func (c Col) Size() int                 { return c().Size() }
func (c Col) Interfaces() []interface{} { return c().Values() }
func (c Col) Values() []Evaluator       { return Slice(c().Values()).Values() }

func (c Col) Clear() Collected { return func() con.Container { Collected(c().Clear()) } }

func (c Col) Serialize() []byte {
	var r = []byte{}
	switch {
	case c.Type()&LIST != 0:
		r = List(c).Serialize()
	case c.Type()&TABLE != 0:
		r = BidiMap(c).Serialize()
	}
	return r
}
func (c Col) String() string  { string(c.Serialize) }
func (c Col) Eval() Evaluator { return c().Serialize() }

////////////////////////////////////////////////////////////////////////////////////
//// LIST ////
//////////////
type List Col

func (l List) Eval() Evaluator  { return Value(l) }
func (l List) Type() ValueType  { return LIST }
func (l List) Size() int        { return l().Size() }
func (l List) Empty() bool      { return l().Empty() }
func (l List) Clear() Collected { return List(func() *al.List { return l().Clear() }) }
func (l List) AddInterface(v ...interface{}) listed {
	var retval = l()
	(*retval).Add(v...)
	var retfn List = func() *al.List { return retval }
	return retfn
}
func (l List) Add(v ...Evaluator) listed {
	var retval = l()
	for _, value := range v {
		value := value
		(*retval).Add(value)
	}
	var retfn List = func() *al.List { return retval }
	return retfn
}
func (l List) Remove(i int) listed {
	var retval = l()
	(*retval).Remove(i)
	var retfn List = func() *al.List { return retval }
	return retfn
}

func (l List) RankedValues() []Pair {
	var retval []Pair
	var fn = func(index int, value interface{}) {
		i := Value(index)
		v := Value(value)
		// pass both values as paired parameter, will trigger eval to
		// produce a key/value tuple type
		retval = append(retval, Value(i, v).(Pair))
	}
	l().Each(fn)
	return retval
}
func (l List) Interfaces() []interface{} {
	return l().Values()
}

func (l List) Values() []Evaluator {
	var retval []Evaluator
	// parameter function to convert slice of interfaces to slice of
	// values once.
	var fn = func(index int, value interface{}) {
		retval = append(retval, Value(l.Interfaces()))
	}
	// retrieve an iterator from collection and call it passing the
	// argument function, to append to the predefined slice
	(con.EnumerableWithIndex)(l()).Each(fn)
	return retval
}

func (l List) Serialize() []byte {
	// allocate return byte slice, so it can be enclosed by the parameter
	// function.
	var retval []byte

	// parameter function to pass on to internal each methode:
	var fn = func(index int, value interface{}) {
		i := Value(index).Serialize()
		v := Value(value).Serialize()

		// format each entry as one line with leading numeric index,
		// followed by a dot and blank character, the Value and a
		// newline character.
		retval = append(
			retval,
			append(
				i,
				append(
					[]byte(".) "),
					append(
						v,
						[]byte("\n")...,
					)...,
				)...,
			)...,
		)
	}
	// call function once per value, to format whole list
	l().Each(fn)
	return retval
}

// use serialization as string format base
func (l List) String() string { return string(l.Serialize()) }
func (l List) Iter() Iterable {
	return IdxIterator(func() *al.Iterator { i := l().Iterator(); return &i })
}
func (l List) Enum() Enumerable {
	var r IdxEnumerable = func() con.EnumerableWithIndex { return l() }
	return r
}

// LIST FROM NATIVE VALUES
var EvalList = func(v ...Evaluator) listed {
	var l = al.New()
	(*l).Add(Slice(v).Interfaces()...)
	var fn List = func() *al.List { return l }
	return fn
}

//////////////////////////////////////////////////////////////////////////
// The Type and Value methods can be pre-assigned at the level of distinct
// functional types, representing each dynamic type
// BOOLEAN VALUE (JACOBI)
type BitFlag func() *big.Int

// The Type and Value methods can be pre-assigned at the level of distinct
// functional types, representing each dynamic type

// wrap flag in a fresh closure and return that.
// TODO: chaeck if this pull's parameters on the stack that evaluation time
func (f BitFlag) Eval() Evaluator { return Value(f) }

// uses byte method of contained big int
func (f BitFlag) Serialize() []byte { return f().Bytes() }

// returns Flag converted to string on base two
func (f BitFlag) String() string { return f().Text(2) }

// returns pure type Flag
func (f BitFlag) Type() ValueType { return FLAG }

func (f BitFlag) Empty() bool {
	if f().Cmp(ZERO.Flag()) > 0 {
		return false
	} else {
		return true
	}
}
func (f BitFlag) Size() int { return f().BitLen() }
func (f BitFlag) Clear() Collected {
	var r *big.Int = f()
	r.Set(ZERO.Flag())
	return BitFlag(func() *big.Int { return r })
}
func (f BitFlag) Values() []Evaluator {
	return Slice(f.Values())
}
func (f BitFlag) Interfaces() []interface{} {
	var v []interface{}
	for _, val := range f().Bits() {
		val := val
		v = append(v, val)
	}
	return v
}

////////////////////////////////////////////////////////////////////////////////////
//// MAP ////
//////////////
type BidiMap func() *hm.Map

func (m BidiMap) Eval() Evaluator  { return Value(m) }
func (m BidiMap) Type() ValueType  { return TABLE }
func (m BidiMap) Size() int        { return m().Size() }
func (m BidiMap) Empty() bool      { return m().Empty() }
func (m BidiMap) Clear() Collected { return BidiMap(func() *al.BidiMap { return l().Clear() }) }
func (l BidiMap) AddInterface(v ...interface{}) listed {
	var retval = l()
	(*retval).Add(v...)
	var retfn BidiMap = func() *al.BidiMap { return retval }
	return retfn
}
func (l BidiMap) Add(v ...Evaluator) listed {
	var retval = l()
	for _, value := range v {
		value := value
		(*retval).Add(value)
	}
	var retfn BidiMap = func() *al.BidiMap { return retval }
	return retfn
}
func (l BidiMap) Remove(i int) listed {
	var retval = l()
	(*retval).Remove(i)
	var retfn BidiMap = func() *al.BidiMap { return retval }
	return retfn
}

func (l BidiMap) RankedValues() []Pair {
	var retval []Pair
	var fn = func(index int, value interface{}) {
		i := Value(index)
		v := Value(value)
		// pass both values as paired parameter, will trigger eval to
		// produce a key/value tuple type
		retval = append(retval, Value(i, v).(Pair))
	}
	l().Each(fn)
	return retval
}
func (l BidiMap) Interfaces() []interface{} {
	return l().Values()
}

func (l BidiMap) Values() []Evaluator {
	var retval []Evaluator
	// parameter function to convert slice of interfaces to slice of
	// values once.
	var fn = func(index int, value interface{}) {
		retval = append(retval, Value(l.Interfaces()))
	}
	// retrieve an iterator from collection and call it passing the
	// argument function, to append to the predefined slice
	(con.EnumerableWithIndex)(l()).Each(fn)
	return retval
}

func (l BidiMap) Serialize() []byte {
	// allocate return byte slice, so it can be enclosed by the parameter
	// function.
	var retval []byte

	// parameter function to pass on to internal each methode:
	var fn = func(index int, value interface{}) {
		i := Value(index).Serialize()
		v := Value(value).Serialize()

		// format each entry as one line with leading numeric index,
		// followed by a dot and blank character, the Value and a
		// newline character.
		retval = append(
			retval,
			append(
				i,
				append(
					[]byte(": "),
					append(
						v,
						[]byte("\n")...,
					)...,
				)...,
			)...,
		)
	}
	// call function once per value, to format whole list
	l().Each(fn)
	return retval
}

// use serialization as string format base
func (l BidiMap) String() string { return string(l.Serialize()) }
func (l BidiMap) Iter() Iterable {
	return IdxIterator(func() *al.Iterator { i := l().Iterator(); return &i })
}
func (l BidiMap) Enum() Enumerable {
	var r IdxEnumerable = func() con.EnumerableWithIndex { return l() }
	return r
}

// LIST FROM NATIVE VALUES
var EvalBidiMap = func(v ...Evaluator) listed {
	var l = al.New()
	(*l).Add(Slice(v).Interfaces()...)
	var fn BidiMap = func() *al.BidiMap { return l }
	return fn
}

//////////////////////////////////////////////////////////////////////////
//
// ITERATOR IMPLEMENTING TYPES (to wrap different iterator implementations)
// the iterator embedded in a arraylist is a struct, of type
// arraylist.Iterator. the list has a method to generate it. Iterators with
// index differ from iterators with key in the expected parameters, not in the
// type of returnvalues they generate. It alters it's state and needs to be
// returned each time.
type IdxIterator func() *al.Iterator

func (l IdxIterator) Index() (int, Iterable)       { return l().Index(), l }
func (l IdxIterator) Value() (Evaluator, Iterable) { return Value(l().Value()), l }
func (l IdxIterator) Next() (bool, Iterable)       { return l().Next(), l }
func (l IdxIterator) First() (bool, Iterable)      { return l().First(), l }
func (l IdxIterator) Begin() Iterable              { l.Begin(); return l }

// reverse iterator interface
func (l IdxIterator) End() Iterable          { l().End(); return l }
func (l IdxIterator) Prev() (bool, Iterable) { return l().Prev(), l }
func (l IdxIterator) Last() (bool, Iterable) { return l().Last(), l }

// ENUMERABLE IMPLEMENTING TYPE
// the enumerator is imolemented by the list itself and alters it's State. Two
// types of enumerable interfaces exist, different in parameters and different
// regarding the type of return values one of its methods returns. the possible
// return types of the differing find method are either int index and interface
// value, or both of the value type. the internal interface returns a value of
// the Pair type instead
type IdxEnumerable func() con.EnumerableWithIndex

func (e IdxEnumerable) Each(pf func(index Evaluator, value Evaluator)) Enumerable {
	e().Each(
		func(index int, value interface{}) {
			pf(Value(index), Value(value)) // each does not return a boolean
		})
	return IdxEnumerable(e)
}

func (e IdxEnumerable) Any(pf func(index Evaluator, value Evaluator) bool) (bool, Enumerable) {
	ok := e().Any(
		func(index int, value interface{}) bool {
			return pf(Value(index), Value(value))
		})
	return ok, e
}
func (e IdxEnumerable) All(pf func(index Evaluator, value Evaluator) bool) (bool, Enumerable) {
	ok := e().All(
		func(index int, value interface{}) bool {
			return pf(Value(index), Value(value))
		})
	return ok, e
}
func (e IdxEnumerable) Find(pf func(index Evaluator, value Evaluator) bool) (Pair, Enumerable) {
	i, v := e().Find(
		func(index int, value interface{}) bool {
			return pf(Value(index), Value(value))
		})
	return Value(i, v).(Pair), e
}

// helper type to convert between slices of interfaces and value slices
type Slice []Evaluator

func (s Slice) Interfaces() (i []interface{}) {
	for _, val := range s {
		i = append(i, val)
	}
	return s.Interfaces()
}
func (s Slice) Values() (i []Evaluator) {
	for _, val := range s {
		i = append(i, val.(Evaluator))
	}
	return i
}
